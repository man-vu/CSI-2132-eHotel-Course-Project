generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Booking {
  BookingID   Int      @id @default(autoincrement()) @map("bookingid")
  CustomerID  Int      @map("customerid")
  RoomID      Int      @map("roomid")
  HotelID     Int      @map("hotelid")
  BookingDate DateTime @map("bookingdate") @db.Date
  StartDate   DateTime @map("startdate") @db.Date
  EndDate     DateTime @map("enddate") @db.Date
  IsArchived  Boolean? @default(false) @map("isarchived")

  Customer    Customer @relation(fields: [CustomerID], references: [CustomerID], onDelete: Cascade, onUpdate: NoAction)
  Room        Room     @relation(fields: [RoomID], references: [RoomID], onDelete: NoAction, onUpdate: NoAction)
  Hotel       Hotel    @relation(fields: [HotelID], references: [HotelID], onDelete: Cascade, onUpdate: NoAction)
  Transaction Transaction[]

  @@index([BookingDate, RoomID], map: "idx_booking_bookingdate_roomid")
  @@map("booking")
}


model Customer {
  CustomerID       Int       @id @default(autoincrement()) @map("customerid")
  Email            String    @map("email") @unique @db.VarChar(100)
  Password         String    @map("password") @db.VarChar(255)
  FullName         String    @map("fullname") @db.VarChar(100)
  Address          String?   @map("address") @db.VarChar(255)
  IDType           String    @map("idtype") @db.VarChar(50)
  IDNumber         String    @map("idnumber") @db.VarChar(50)
  RegistrationDate DateTime  @map("registrationdate") @db.Date
  Booking          Booking[]
  Renting          Renting[]
  Transaction      Transaction[]

  @@map("customer")
}

model Employee {
  EmployeeID Int       @id @default(autoincrement()) @map("employeeid")
  Email      String    @map("email") @unique @db.VarChar(100)
  Password   String    @map("password") @db.VarChar(255)
  HotelID    Int       @map("hotelid")
  FullName   String    @map("fullname") @db.VarChar(100)
  Address    String?   @map("address") @db.VarChar(255)
  SSN        String    @unique @map("ssn") @db.VarChar(15)
  Role       String    @map("role") @db.VarChar(50)
  Hotel      Hotel     @relation(fields: [HotelID], references: [HotelID], onDelete: Cascade, onUpdate: NoAction)
  Renting    Renting[]

  @@map("employee")
}

model Hotel {
  HotelID       Int        @id @default(autoincrement()) @map("hotelid")
  ChainID       Int        @map("chainid")
  Name          String     @map("name") @db.VarChar(100)
  Address       String     @map("address") @db.VarChar(255)
  StarRating    Int?       @map("starrating")
  Email         String?    @map("email") @db.VarChar(100)
  Phone         String?    @map("phone") @db.VarChar(15)
  NumberOfRooms Int        @map("numberofrooms")
  Employee      Employee[]
  HotelChain    HotelChain @relation(fields: [ChainID], references: [ChainID], onDelete: Cascade, onUpdate: NoAction)
  Room          Room[]
  Booking       Booking[]
  Renting       Renting[]

  @@index([StarRating], map: "idx_hotel_starrating")
  @@map("hotel")
}

model HotelChain {
  ChainID              Int     @id @default(autoincrement()) @map("chainid")
  Name                 String  @map("name") @db.VarChar(100)
  CentralOfficeAddress String  @map("centralofficeaddress") @db.VarChar(255)
  NumberOfHotels       Int     @map("numberofhotels")
  Email                String? @map("email") @db.VarChar(100)
  Phone                String? @map("phone") @db.VarChar(15)
  Hotel                Hotel[]

  @@map("hotelchain")
}

model Renting {
  RentingID  Int      @id @default(autoincrement()) @map("rentingid")
  CustomerID Int      @map("customerid")
  RoomID     Int      @map("roomid")
  HotelID    Int      @map("hotelid")
  RentDate   DateTime @map("rentdate") @db.Date
  Duration   Int      @map("duration")
  HandledBy  Int?     @map("handledby")
  IsArchived Boolean? @default(false) @map("isarchived")

  Customer   Customer @relation(fields: [CustomerID], references: [CustomerID], onDelete: Cascade, onUpdate: NoAction)
  Employee   Employee @relation(fields: [HandledBy], references: [EmployeeID], onDelete: SetNull, onUpdate: NoAction)
  Room       Room     @relation(fields: [RoomID], references: [RoomID], onDelete: NoAction, onUpdate: NoAction)
  Hotel      Hotel    @relation(fields: [HotelID], references: [HotelID], onDelete: Cascade, onUpdate: NoAction)
  Transaction Transaction[] 

  @@map("renting")
}


model Room {
  RoomID            Int       @id @default(autoincrement()) @map("roomid")
  HotelID           Int       @map("hotelid")
  Price             Int       @map("price") 
  Capacity          String    @map("capacity") @db.VarChar(50)
  Amenities         String?   @map("amenities") @db.VarChar(255)
  ViewType          String?   @map("viewtype") @db.VarChar(50)
  IsExtendable      Boolean   @map("isextendable")
  DamageDescription String?   @map("damagedescription")
  Booking           Booking[]
  Renting           Renting[]
  Hotel             Hotel     @relation(fields: [HotelID], references: [HotelID], onDelete: Cascade, onUpdate: NoAction)

  @@index([Price], map: "idx_room_price")
  @@map("room")
}

model Transaction {
  TransactionID  Int       @id @default(autoincrement()) @map("transactionid")
  CustomerID     Int       @map("customerid")
  RentingID      Int?      @map("rentingid")
  BookingID      Int?      @map("bookingid")
  Amount         Int       @map("amount")
  PaymentMethod  String    @map("paymentmethod") @db.VarChar(50)
  PaymentDate    DateTime? @default(now()) @map("paymentdate") @db.Timestamp(6)

  Customer       Customer  @relation(fields: [CustomerID], references: [CustomerID], onDelete: NoAction, onUpdate: NoAction)
  Renting        Renting?  @relation(fields: [RentingID], references: [RentingID], onDelete: SetNull, onUpdate: NoAction)
  Booking        Booking?  @relation(fields: [BookingID], references: [BookingID], onDelete: SetNull, onUpdate: NoAction)

  @@map("transaction")
}
